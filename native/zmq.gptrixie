## Enumerations
## Structures


# == <builtin> ==

class __va_list_tag is repr('CStruct') is export {
	has uint32                        $.gp_offset; # unsigned int gp_offset
	has uint32                        $.fp_offset; # unsigned int fp_offset
	has Pointer                       $.overflow_arg_area; # void* overflow_arg_area
	has Pointer                       $.reg_save_area; # void* reg_save_area
}

# == /usr/include/_G_config.h ==

class  is repr('CStruct') is export {
	has __off64_t                     $.__pos; # Typedef<__off64_t>->|long int| __pos
	has                               $.__state; # Typedef<__mbstate_t>->|| __state
}

# == zmq.h ==

class zmq_msg_t is repr('CStruct') is export {
	has CArray[uint8]                 $._; # unsigned char[64] _
}
class zmq_pollitem_t is repr('CStruct') is export {
	has Pointer                       $.socket; # void* socket
	has int32                         $.fd; # int fd
	has int16                         $.events; # short int events
	has int16                         $.revents; # short int revents
}
class iovec is repr('CStruct') is export {
}
## Extras stuff

constant _G_fpos_t is export := ;
constant FILE is export := _IO_FILE;
constant __FILE is export := _IO_FILE;
constant _G_fpos64_t is export := ;
constant zmq_pollitem_t is export := zmq_pollitem_t;
constant _IO_lock_tPtr is export = Pointer;
constant __mbstate_t is export := ;
constant _IO_FILE is export := _IO_FILE;
constant zmq_msg_t is export := zmq_msg_t;
constant __fsid_t is export := ;
## Functions


# == zmq.h ==

#-From zmq.h:197
#/*  This function retrieves the errno as it is known to 0MQ library. The goal */
#/*  of this function is to make the code 100% portable, including where 0MQ   */
#/*  compiled with certain CRT library (on Windows) is linked to an            */
#/*  application that uses different CRT library.                              */
#ZMQ_EXPORT int zmq_errno (void);
sub zmq_errno(
              ) is native(LIB) returns int32 is export { * }

#-From zmq.h:200
#/*  Resolves system errors and 0MQ errors to human-readable string.           */
#ZMQ_EXPORT const char *zmq_strerror (int errnum);
sub zmq_strerror(int32 $errnum # int
                 ) is native(LIB) returns Str is export { * }

#-From zmq.h:203
#/*  Run-time API version detection                                            */
#ZMQ_EXPORT void zmq_version (int *major, int *minor, int *patch);
sub zmq_version(Pointer[int32]                $major # int*
               ,Pointer[int32]                $minor # int*
               ,Pointer[int32]                $patch # int*
                ) is native(LIB)  is export { * }

#-From zmq.h:223
#ZMQ_EXPORT void *zmq_ctx_new (void);
sub zmq_ctx_new(
                ) is native(LIB) returns Pointer is export { * }

#-From zmq.h:224
#ZMQ_EXPORT int zmq_ctx_term (void *context);
sub zmq_ctx_term(Pointer $context # void*
                 ) is native(LIB) returns int32 is export { * }

#-From zmq.h:225
#ZMQ_EXPORT int zmq_ctx_shutdown (void *context);
sub zmq_ctx_shutdown(Pointer $context # void*
                     ) is native(LIB) returns int32 is export { * }

#-From zmq.h:226
#ZMQ_EXPORT int zmq_ctx_set (void *context, int option, int optval);
sub zmq_ctx_set(Pointer                       $context # void*
               ,int32                         $option # int
               ,int32                         $optval # int
                ) is native(LIB) returns int32 is export { * }

#-From zmq.h:227
#ZMQ_EXPORT int zmq_ctx_get (void *context, int option);
sub zmq_ctx_get(Pointer                       $context # void*
               ,int32                         $option # int
                ) is native(LIB) returns int32 is export { * }

#-From zmq.h:230
#/*  Old (legacy) API                                                          */
#ZMQ_EXPORT void *zmq_init (int io_threads);
sub zmq_init(int32 $io_threads # int
             ) is native(LIB) returns Pointer is export { * }

#-From zmq.h:231
#ZMQ_EXPORT int zmq_term (void *context);
sub zmq_term(Pointer $context # void*
             ) is native(LIB) returns int32 is export { * }

#-From zmq.h:232
#ZMQ_EXPORT int zmq_ctx_destroy (void *context);
sub zmq_ctx_destroy(Pointer $context # void*
                    ) is native(LIB) returns int32 is export { * }

#-From zmq.h:259
#ZMQ_EXPORT int zmq_msg_init (zmq_msg_t *msg);
sub zmq_msg_init(zmq_msg_t $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                 ) is native(LIB) returns int32 is export { * }

#-From zmq.h:260
#ZMQ_EXPORT int zmq_msg_init_size (zmq_msg_t *msg, size_t size);
sub zmq_msg_init_size(zmq_msg_t                     $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                     ,size_t                        $size # Typedef<size_t>->|long unsigned int|
                      ) is native(LIB) returns int32 is export { * }

#-From zmq.h:261
#ZMQ_EXPORT int zmq_msg_init_data (zmq_msg_t *msg, void *data,
sub zmq_msg_init_data(zmq_msg_t                     $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                     ,Pointer                       $data # void*
                     ,size_t                        $size # Typedef<size_t>->|long unsigned int|
                     ,Pointer[NYI(F:void ( ))]      $ffn # Typedef<zmq_free_fn>->|F:void ( )|*
                     ,Pointer                       $hint # void*
                      ) is native(LIB) returns int32 is export { * }

#-From zmq.h:263
#ZMQ_EXPORT int zmq_msg_send (zmq_msg_t *msg, void *s, int flags);
sub zmq_msg_send(zmq_msg_t                     $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                ,Pointer                       $s # void*
                ,int32                         $flags # int
                 ) is native(LIB) returns int32 is export { * }

#-From zmq.h:264
#ZMQ_EXPORT int zmq_msg_recv (zmq_msg_t *msg, void *s, int flags);
sub zmq_msg_recv(zmq_msg_t                     $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                ,Pointer                       $s # void*
                ,int32                         $flags # int
                 ) is native(LIB) returns int32 is export { * }

#-From zmq.h:265
#ZMQ_EXPORT int zmq_msg_close (zmq_msg_t *msg);
sub zmq_msg_close(zmq_msg_t $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                  ) is native(LIB) returns int32 is export { * }

#-From zmq.h:266
#ZMQ_EXPORT int zmq_msg_move (zmq_msg_t *dest, zmq_msg_t *src);
sub zmq_msg_move(zmq_msg_t                     $dest # Typedef<zmq_msg_t>->|zmq_msg_t|*
                ,zmq_msg_t                     $src # Typedef<zmq_msg_t>->|zmq_msg_t|*
                 ) is native(LIB) returns int32 is export { * }

#-From zmq.h:267
#ZMQ_EXPORT int zmq_msg_copy (zmq_msg_t *dest, zmq_msg_t *src);
sub zmq_msg_copy(zmq_msg_t                     $dest # Typedef<zmq_msg_t>->|zmq_msg_t|*
                ,zmq_msg_t                     $src # Typedef<zmq_msg_t>->|zmq_msg_t|*
                 ) is native(LIB) returns int32 is export { * }

#-From zmq.h:268
#ZMQ_EXPORT void *zmq_msg_data (zmq_msg_t *msg);
sub zmq_msg_data(zmq_msg_t $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                 ) is native(LIB) returns Pointer is export { * }

#-From zmq.h:269
#ZMQ_EXPORT size_t zmq_msg_size (zmq_msg_t *msg);
sub zmq_msg_size(zmq_msg_t $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                 ) is native(LIB) returns size_t is export { * }

#-From zmq.h:270
#ZMQ_EXPORT int zmq_msg_more (zmq_msg_t *msg);
sub zmq_msg_more(zmq_msg_t $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                 ) is native(LIB) returns int32 is export { * }

#-From zmq.h:271
#ZMQ_EXPORT int zmq_msg_get (zmq_msg_t *msg, int property);
sub zmq_msg_get(zmq_msg_t                     $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
               ,int32                         $property # int
                ) is native(LIB) returns int32 is export { * }

#-From zmq.h:272
#ZMQ_EXPORT int zmq_msg_set (zmq_msg_t *msg, int property, int optval);
sub zmq_msg_set(zmq_msg_t                     $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
               ,int32                         $property # int
               ,int32                         $optval # int
                ) is native(LIB) returns int32 is export { * }

#-From zmq.h:273
#ZMQ_EXPORT const char *zmq_msg_gets (zmq_msg_t *msg, const char *property);
sub zmq_msg_gets(zmq_msg_t                     $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
                ,Str                           $property # const char*
                 ) is native(LIB) returns Str is export { * }

#-From zmq.h:422
#ZMQ_EXPORT void *zmq_socket (void *, int type);
sub zmq_socket(Pointer                        # void*
              ,int32                         $type # int
               ) is native(LIB) returns Pointer is export { * }

#-From zmq.h:423
#ZMQ_EXPORT int zmq_close (void *s);
sub zmq_close(Pointer $s # void*
              ) is native(LIB) returns int32 is export { * }

#-From zmq.h:424
#ZMQ_EXPORT int zmq_setsockopt (void *s, int option, const void *optval, size_t optvallen);
sub zmq_setsockopt(Pointer                       $s # void*
                  ,int32                         $option # int
                  ,Pointer                       $optval # const void*
                  ,size_t                        $optvallen # Typedef<size_t>->|long unsigned int|
                   ) is native(LIB) returns int32 is export { * }

#-From zmq.h:425
#ZMQ_EXPORT int zmq_getsockopt (void *s, int option, void *optval, size_t *optvallen);
sub zmq_getsockopt(Pointer                       $s # void*
                  ,int32                         $option # int
                  ,Pointer                       $optval # void*
                  ,Pointer[size_t]               $optvallen # Typedef<size_t>->|long unsigned int|*
                   ) is native(LIB) returns int32 is export { * }

#-From zmq.h:426
#ZMQ_EXPORT int zmq_bind (void *s, const char *addr);
sub zmq_bind(Pointer                       $s # void*
            ,Str                           $addr # const char*
             ) is native(LIB) returns int32 is export { * }

#-From zmq.h:427
#ZMQ_EXPORT int zmq_connect (void *s, const char *addr);
sub zmq_connect(Pointer                       $s # void*
               ,Str                           $addr # const char*
                ) is native(LIB) returns int32 is export { * }

#-From zmq.h:428
#ZMQ_EXPORT int zmq_unbind (void *s, const char *addr);
sub zmq_unbind(Pointer                       $s # void*
              ,Str                           $addr # const char*
               ) is native(LIB) returns int32 is export { * }

#-From zmq.h:429
#ZMQ_EXPORT int zmq_disconnect (void *s, const char *addr);
sub zmq_disconnect(Pointer                       $s # void*
                  ,Str                           $addr # const char*
                   ) is native(LIB) returns int32 is export { * }

#-From zmq.h:430
#ZMQ_EXPORT int zmq_send (void *s, const void *buf, size_t len, int flags);
sub zmq_send(Pointer                       $s # void*
            ,Pointer                       $buf # const void*
            ,size_t                        $len # Typedef<size_t>->|long unsigned int|
            ,int32                         $flags # int
             ) is native(LIB) returns int32 is export { * }

#-From zmq.h:431
#ZMQ_EXPORT int zmq_send_const (void *s, const void *buf, size_t len, int flags);
sub zmq_send_const(Pointer                       $s # void*
                  ,Pointer                       $buf # const void*
                  ,size_t                        $len # Typedef<size_t>->|long unsigned int|
                  ,int32                         $flags # int
                   ) is native(LIB) returns int32 is export { * }

#-From zmq.h:432
#ZMQ_EXPORT int zmq_recv (void *s, void *buf, size_t len, int flags);
sub zmq_recv(Pointer                       $s # void*
            ,Pointer                       $buf # void*
            ,size_t                        $len # Typedef<size_t>->|long unsigned int|
            ,int32                         $flags # int
             ) is native(LIB) returns int32 is export { * }

#-From zmq.h:433
#ZMQ_EXPORT int zmq_socket_monitor (void *s, const char *addr, int events);
sub zmq_socket_monitor(Pointer                       $s # void*
                      ,Str                           $addr # const char*
                      ,int32                         $events # int
                       ) is native(LIB) returns int32 is export { * }

#-From zmq.h:459
#ZMQ_EXPORT int  zmq_poll (zmq_pollitem_t *items, int nitems, long timeout);
sub zmq_poll(zmq_pollitem_t                $items # Typedef<zmq_pollitem_t>->|zmq_pollitem_t|*
            ,int32                         $nitems # int
            ,long                          $timeout # long int
             ) is native(LIB) returns int32 is export { * }

#-From zmq.h:465
#ZMQ_EXPORT int zmq_proxy (void *frontend, void *backend, void *capture);
sub zmq_proxy(Pointer                       $frontend # void*
             ,Pointer                       $backend # void*
             ,Pointer                       $capture # void*
              ) is native(LIB) returns int32 is export { * }

#-From zmq.h:466
#ZMQ_EXPORT int zmq_proxy_steerable (void *frontend, void *backend, void *capture, void *control);
sub zmq_proxy_steerable(Pointer                       $frontend # void*
                       ,Pointer                       $backend # void*
                       ,Pointer                       $capture # void*
                       ,Pointer                       $control # void*
                        ) is native(LIB) returns int32 is export { * }

#-From zmq.h:473
##define ZMQ_HAS_CAPABILITIES 1
#ZMQ_EXPORT int zmq_has (const char *capability);
sub zmq_has(Str $capability # const char*
            ) is native(LIB) returns int32 is export { * }

#-From zmq.h:481
#/*  Deprecated methods */
#ZMQ_EXPORT int zmq_device (int type, void *frontend, void *backend);
sub zmq_device(int32                         $type # int
              ,Pointer                       $frontend # void*
              ,Pointer                       $backend # void*
               ) is native(LIB) returns int32 is export { * }

#-From zmq.h:482
#ZMQ_EXPORT int zmq_sendmsg (void *s, zmq_msg_t *msg, int flags);
sub zmq_sendmsg(Pointer                       $s # void*
               ,zmq_msg_t                     $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
               ,int32                         $flags # int
                ) is native(LIB) returns int32 is export { * }

#-From zmq.h:483
#ZMQ_EXPORT int zmq_recvmsg (void *s, zmq_msg_t *msg, int flags);
sub zmq_recvmsg(Pointer                       $s # void*
               ,zmq_msg_t                     $msg # Typedef<zmq_msg_t>->|zmq_msg_t|*
               ,int32                         $flags # int
                ) is native(LIB) returns int32 is export { * }

#-From zmq.h:485
#ZMQ_EXPORT int zmq_sendiov (void *s, struct iovec *iov, size_t count, int flags);
sub zmq_sendiov(Pointer                       $s # void*
               ,iovec                         $iov # iovec*
               ,size_t                        $count # Typedef<size_t>->|long unsigned int|
               ,int32                         $flags # int
                ) is native(LIB) returns int32 is export { * }

#-From zmq.h:486
#ZMQ_EXPORT int zmq_recviov (void *s, struct iovec *iov, size_t *count, int flags);
sub zmq_recviov(Pointer                       $s # void*
               ,iovec                         $iov # iovec*
               ,Pointer[size_t]               $count # Typedef<size_t>->|long unsigned int|*
               ,int32                         $flags # int
                ) is native(LIB) returns int32 is export { * }

#-From zmq.h:493
#/*  Encode data with Z85 encoding. Returns encoded data                       */
#ZMQ_EXPORT char *zmq_z85_encode (char *dest, const uint8_t *data, size_t size);
sub zmq_z85_encode(Str                           $dest # char*
                  ,Pointer[uint8_t]              $data # const Typedef<uint8_t>->|unsigned char|*
                  ,size_t                        $size # Typedef<size_t>->|long unsigned int|
                   ) is native(LIB) returns Str is export { * }

#-From zmq.h:496
#/*  Decode data with Z85 encoding. Returns decoded data                       */
#ZMQ_EXPORT uint8_t *zmq_z85_decode (uint8_t *dest, const char *string);
sub zmq_z85_decode(Pointer[uint8_t]              $dest # Typedef<uint8_t>->|unsigned char|*
                  ,Str                           $string # const char*
                   ) is native(LIB) returns Pointer[uint8_t] is export { * }

#-From zmq.h:500
#/*  Generate z85-encoded public and private keypair with tweetnacl/libsodium. */
#/*  Returns 0 on success.                                                     */
#ZMQ_EXPORT int zmq_curve_keypair (char *z85_public_key, char *z85_secret_key);
sub zmq_curve_keypair(Str                           $z85_public_key # char*
                     ,Str                           $z85_secret_key # char*
                      ) is native(LIB) returns int32 is export { * }

#-From zmq.h:504
#/*  Derive the z85-encoded public key from the z85-encoded secret key.        */
#/*  Returns 0 on success.                                                     */
#ZMQ_EXPORT int zmq_curve_public (char *z85_public_key, const char *z85_secret_key);
sub zmq_curve_public(Str                           $z85_public_key # char*
                    ,Str                           $z85_secret_key # const char*
                     ) is native(LIB) returns int32 is export { * }

#-From zmq.h:510
#ZMQ_EXPORT void *zmq_atomic_counter_new (void);
sub zmq_atomic_counter_new(
                           ) is native(LIB) returns Pointer is export { * }

#-From zmq.h:511
#ZMQ_EXPORT void zmq_atomic_counter_set (void *counter, int value);
sub zmq_atomic_counter_set(Pointer                       $counter # void*
                          ,int32                         $value # int
                           ) is native(LIB)  is export { * }

#-From zmq.h:512
#ZMQ_EXPORT int zmq_atomic_counter_inc (void *counter);
sub zmq_atomic_counter_inc(Pointer $counter # void*
                           ) is native(LIB) returns int32 is export { * }

#-From zmq.h:513
#ZMQ_EXPORT int zmq_atomic_counter_dec (void *counter);
sub zmq_atomic_counter_dec(Pointer $counter # void*
                           ) is native(LIB) returns int32 is export { * }

#-From zmq.h:514
#ZMQ_EXPORT int zmq_atomic_counter_value (void *counter);
sub zmq_atomic_counter_value(Pointer $counter # void*
                             ) is native(LIB) returns int32 is export { * }

#-From zmq.h:515
#ZMQ_EXPORT void zmq_atomic_counter_destroy (void **counter_p);
sub zmq_atomic_counter_destroy(Pointer[Pointer] $counter_p # void**
                               ) is native(LIB)  is export { * }

#-From zmq.h:528
#/*  Starts the stopwatch. Returns the handle to the watch.                    */
#ZMQ_EXPORT void *zmq_stopwatch_start (void);
sub zmq_stopwatch_start(
                        ) is native(LIB) returns Pointer is export { * }

#-From zmq.h:532
#/*  Stops the stopwatch. Returns the number of microseconds elapsed since     */
#/*  the stopwatch was started.                                                */
#ZMQ_EXPORT unsigned long zmq_stopwatch_stop (void *watch_);
sub zmq_stopwatch_stop(Pointer $watch_ # void*
                       ) is native(LIB) returns ulong is export { * }

#-From zmq.h:535
#/*  Sleeps for specified number of seconds.                                   */
#ZMQ_EXPORT void zmq_sleep (int seconds_);
sub zmq_sleep(int32 $seconds_ # int
              ) is native(LIB)  is export { * }

#-From zmq.h:540
#/* Start a thread. Returns a handle to the thread.                            */
#ZMQ_EXPORT void *zmq_threadstart (zmq_thread_fn* func, void* arg);
sub zmq_threadstart(Pointer[NYI(F:void ( ))]      $func # Typedef<zmq_thread_fn>->|F:void ( )|*
                   ,Pointer                       $arg # void*
                    ) is native(LIB) returns Pointer is export { * }

#-From zmq.h:543
#/* Wait for thread to complete then free up resources.                        */
#ZMQ_EXPORT void zmq_threadclose (void* thread);
sub zmq_threadclose(Pointer $thread # void*
                    ) is native(LIB)  is export { * }

## Externs

